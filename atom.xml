<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hanjingyuan.github.io</id>
    <title>汉景源的博客</title>
    <updated>2020-01-13T01:59:01.895Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hanjingyuan.github.io"/>
    <link rel="self" href="https://hanjingyuan.github.io/atom.xml"/>
    <subtitle>我只是一个GIS工程师，来自长沙。</subtitle>
    <logo>https://hanjingyuan.github.io/images/avatar.png</logo>
    <icon>https://hanjingyuan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 汉景源的博客</rights>
    <entry>
        <title type="html"><![CDATA[Geotools maven问题]]></title>
        <id>https://hanjingyuan.github.io/post/E14UYvFzE</id>
        <link href="https://hanjingyuan.github.io/post/E14UYvFzE">
        </link>
        <updated>2020-01-13T01:12:16.000Z</updated>
        <content type="html"><![CDATA[<p>在maven中使用geotools时，一定要使用固定版本号，而不是使用snapshot，如果使用snapshot，则会导致每次打包时都会去远程仓库中下载匹配最新的包，而不是使用本地的包；</p>
<pre><code class="language-xml">    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;geotools.version&gt;21.4&lt;/geotools.version&gt;
    &lt;/properties&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Geotools坐标转换]]></title>
        <id>https://hanjingyuan.github.io/post/sNQdoSQE3</id>
        <link href="https://hanjingyuan.github.io/post/sNQdoSQE3">
        </link>
        <updated>2020-01-10T08:18:16.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>创建坐标转换</li>
</ol>
<pre><code class="language-java">    /**
     * 创建坐标系转换方法
     * @param sourceWkt 源坐标系WKT定义
     * @param targetWkt 目标坐标系WKT定义
     * @return
     */
public static MathTransform createMathTransform(String sourceWkt, String targetWkt){
    CoordinateReferenceSystem source = null;
    CoordinateReferenceSystem target = null;
    try {
        source = CRS.parseWKT(sourceWkt);
        target = CRS.parseWKT(targetWkt);
    } catch (FactoryException e) {
        e.printStackTrace();
    }

    MathTransform transform = null;
    try {
        transform = CRS.findMathTransform(source, target);
    } catch (FactoryException e) {
        e.printStackTrace();
    }
    return transform;
}
</code></pre>
<ol start="2">
<li>将wkt转换为geometry</li>
</ol>
<pre><code class="language-java">    /**
     * 将wkt数据转为geometry数据
     * @param wkt
     * @return
     */
public static Geometry transformWktToGeometry(String wkt){
    GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory();
    WKTReader reader = new WKTReader(geometryFactory);
    Geometry geometry = null;
    try {
        geometry = (Geometry) reader.read(wkt);
    } catch (ParseException e) {
        e.printStackTrace();
    }
    return geometry;
}
</code></pre>
<ol start="3">
<li>将坐标转为指定坐标系</li>
</ol>
<pre><code class="language-java">    /**
     * 将输入要素转换为指定坐标系
     * @param geometry
     * @param mathTransform 坐标转换方法
     * @return
     */
public static Geometry transformGeometryProjection(Geometry geometry, MathTransform mathTransform){
    Geometry result = null;
    try {
        result = JTS.transform(geometry, mathTransform);
    } catch (TransformException e) {
        e.printStackTrace();
    }
    return result;
}


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[组织树的递归算法]]></title>
        <id>https://hanjingyuan.github.io/post/eAx-5ylvO</id>
        <link href="https://hanjingyuan.github.io/post/eAx-5ylvO">
        </link>
        <updated>2020-01-09T01:01:47.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>普通递归算法</li>
</ol>
<pre><code class="language-js">xxzxServ.getSelectedNodes = function(treeList, m) {
    for(let i=0;i&lt;treeList.length;i++){
        if (treeList[i].selected === true) {
            m.push(treeList[i])
        }
        let children = treeList[i].children;
        if (Array.isArray(children) &amp;&amp; children.length &gt; 0) {
            children.forEach(function (item) {
                xxzxServ.getCheckedNodes([item], m)
            })
        }
    }
    return m
};
</code></pre>
<ol start="2">
<li>进阶递归:对组织树进行递归，若节点为图层节点，那么此节点被删掉不显示。同时增加判断，若父节点的子节点全被删掉了，那么要被父节点置空。</li>
</ol>
<pre><code class="language-js">function treeFormat(treeList) {
    for(let i=0;i&lt;treeList.length;i++){
        if (treeList[i].layerId.length &gt; 0) {
            delete treeList[i];
            continue
        }
        if(treeList[i].hasOwnProperty('children')){
            let children = treeList[i].children;
            if (Array.isArray(children) &amp;&amp; children.length &gt; 0) {
                treeFormat(children)
            }
        }
        //这一步是为了 删除数组项后，被删除项会被定义为empty，且数组长度不变
        //此时需要通过filter来过滤数组，实现数组长度被降低
        if(Array.isArray(treeList[i].children)){
            treeList[i].children = 
            treeList[i].children.filter(item=&gt;item !== undefined);
        }

    }
 }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[maven打包相关]]></title>
        <id>https://hanjingyuan.github.io/post/cIuOD1fpK</id>
        <link href="https://hanjingyuan.github.io/post/cIuOD1fpK">
        </link>
        <updated>2019-12-26T02:03:27.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>打包时忽略test</li>
</ol>
<pre><code class="language-xml">mvn package -Dmaven.test.skip=true
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[postgis土地利用分析查询]]></title>
        <id>https://hanjingyuan.github.io/post/IBAE_Gh3I</id>
        <link href="https://hanjingyuan.github.io/post/IBAE_Gh3I">
        </link>
        <updated>2019-12-24T01:29:36.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>求出裁剪后的图斑</li>
</ol>
<pre><code class="language-sql">SELECT res.*, 
	st_area(res.wkt) as real_area, 
	st_astext(res.wkt) as real_wkt
FROM (
		SELECT jb.*,
		ST_Intersection(jb.geom, 
						st_geomfromtext('POLYGON ((113.14665136337281 28.156513464450835, 113.14883825778962 28.154443204402924, 113.14498932361603 28.153830873966218, 113.14665136337281 28.156513464450835))',4490)
			) 
		AS wkt
		FROM public.jbntbhtb as jb
		WHERE 
			ST_Intersects(jb.geom, 
						  st_geomfromtext('POLYGON ((113.14665136337281 28.156513464450835, 113.14883825778962 28.154443204402924, 113.14498932361603 28.153830873966218, 113.14665136337281 28.156513464450835))',4490)
				)
	) 
AS res;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[javascript常用方法]]></title>
        <id>https://hanjingyuan.github.io/post/CX4aRFvo5</id>
        <link href="https://hanjingyuan.github.io/post/CX4aRFvo5">
        </link>
        <updated>2019-12-23T02:05:37.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>根据索引，删除数组中的项</li>
</ol>
<pre><code class="language-js">let arr  = ['a','b','c','d','e','f']
arr.splice(4, 1);//删除e
</code></pre>
<ol start="2">
<li>时间戳相关</li>
</ol>
<pre><code class="language-js">const date = Date.parse(new Date());//时间戳快速获取

const timestamp = (new Date('2019-01-01')).valueOf();
</code></pre>
<ol start="3">
<li>select的获取方法</li>
</ol>
<pre><code class="language-js">$(&quot;#customScopesBuffUnit&quot;).find(&quot;option:selected&quot;).val();//获取当前select选中的值

//获取值得变化
$('#quickSearchSelectLayer').change(function (evt) {
    const id = $(this).children('option:selected').val();
    //xxxxxx
})
</code></pre>
<ol start="4">
<li>$q的方法使用</li>
</ol>
<pre><code class="language-js">var deferred = $q.defer();

return deferred.promise;


function getLayerInfo(layers) {
    const deferred = $q.defer();
    Promise.all(layers.map(layer=&gt;{
        return new Promise(function (resolve,reject) {

        })
    })).then(resp=&gt;{
        deferred.resolve(resp);
    });
    return deferred.promise;
}
</code></pre>
<ol start="5">
<li>json序列化的方式完成快速替换</li>
</ol>
<pre><code class="language-js">JSON.parse(JSON.stringify(treeData).replace(/&quot;title&quot;/g,'&quot;name&quot;'))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[服务部署流程]]></title>
        <id>https://hanjingyuan.github.io/post/jjtD2Z_HM</id>
        <link href="https://hanjingyuan.github.io/post/jjtD2Z_HM">
        </link>
        <updated>2019-12-16T01:44:35.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>jdk/tomcat的环境安装</li>
<li>postgresql数据局/postgis的安装</li>
<li>geoserver war包的安装</li>
</ol>
<pre><code>3.1 geoserver 跨域的配置：1）添加跨域jar包；2）修改web.xml文件，释放跨域；
3.2 主键暴露 
3.3 tomcat的put和delete方法释放
</code></pre>
<ol start="4">
<li>pg数据表的迁移</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pg mybatis 多表联查]]></title>
        <id>https://hanjingyuan.github.io/post/G1Z5TSaLV</id>
        <link href="https://hanjingyuan.github.io/post/G1Z5TSaLV">
        </link>
        <updated>2019-12-12T07:25:09.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-sql">SELECT r.* from tb_role r where r.role_id in (select ur.role_id from tb_user_role ur where user_id = '470a05096a8968d8edb51c9b280ed06d')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[postgresql数据库的导入和导出]]></title>
        <id>https://hanjingyuan.github.io/post/sZz9cqVrF</id>
        <link href="https://hanjingyuan.github.io/post/sZz9cqVrF">
        </link>
        <updated>2019-11-27T02:10:09.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>数据库的导出</li>
</ol>
<pre><code>1.在pg数据库的bin目录下执行cmd命令行（一定要用cmd命令行），或者需要配置环境变量，包含了pg数据库安装根目录下的bin目录和lib目录，配置到Path中去即可；
1.pg_dump  -U postgres  数据库名称 &gt; c:\db.sql ——数据库整体的导出
1.1 pg_dump -U postgres -s -f open_map.sql open_map（仅导出表结构不到处表数据）
2.pg_dump -U postgres poidata（数据库名称） -t poi（表名称） -f /home/share/wg/poi.sql（输出路径）——单表的导出
</code></pre>
<ol start="2">
<li>数据库的导入</li>
</ol>
<pre><code>1.执行psql -U postgres -d gwh（数据库名称，要预先创建好） &lt; gwh.sql（上一步中导出的sql文件，放到bin目录中）；
2.数据表的导入：和上面的方法是一样的，指定好要导入的数据库即可；
3.执行之后需要先进行一定时间的等待才能完成导入的操作；
</code></pre>
<ol start="3">
<li>参考</li>
</ol>
<blockquote>
<p>https://www.cnblogs.com/huajiezh/p/6186309.html<br>
https://blog.csdn.net/fct2001140269/article/details/88736608</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[geoserver basic认证]]></title>
        <id>https://hanjingyuan.github.io/post/xOnHlsUVk</id>
        <link href="https://hanjingyuan.github.io/post/xOnHlsUVk">
        </link>
        <updated>2019-11-14T09:43:20.000Z</updated>
        <content type="html"><![CDATA[<pre><code>String plainCredentials = &quot;test1:123456&quot;;
String base64Credentials = new String(Base64.encodeBase64(plainCredentials.getBytes()));
//输出结果dGVzdDE6MTIzNDU2
//在js请求时，把Authorization:Basic dGVzdDE6MTIzNDU2放到header请求中即可
</code></pre>
]]></content>
    </entry>
</feed>