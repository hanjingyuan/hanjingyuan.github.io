<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hanjingyuan.github.io</id>
    <title>汉景源的博客</title>
    <updated>2019-10-12T03:39:54.520Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hanjingyuan.github.io"/>
    <link rel="self" href="https://hanjingyuan.github.io/atom.xml"/>
    <subtitle>我只是一个GIS工程师，来自长沙。</subtitle>
    <logo>https://hanjingyuan.github.io/images/avatar.png</logo>
    <icon>https://hanjingyuan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 汉景源的博客</rights>
    <entry>
        <title type="html"><![CDATA[geoserver中wfs使用时的启动时间探索]]></title>
        <id>https://hanjingyuan.github.io/post/geoserver-zhong-wfs-shi-yong-shi-de-qi-dong-shi-jian-tan-suo</id>
        <link href="https://hanjingyuan.github.io/post/geoserver-zhong-wfs-shi-yong-shi-de-qi-dong-shi-jian-tan-suo">
        </link>
        <updated>2019-10-12T03:22:44.000Z</updated>
        <content type="html"><![CDATA[<p>在使用geoserver的wfs服务时，每次把tomcat重启之后，第一次使用wfs会使用很长的时间来打开数据库连接池？同时会进行一个getServiceInfo的操作。</p>
<h2 id="1使用get请求">1.使用get请求</h2>
<p>速度很快，即时即可完成<br>
<img src="https://hanjingyuan.github.io/post-images/1570851255891.png" alt=""><br>
<img src="https://hanjingyuan.github.io/post-images/1570851297925.png" alt=""></p>
<h2 id="2使用post">2.使用post</h2>
<p>速度很慢，在进行请求之前需要进行一个getServiceInfo的操作，这个操作的时间长达半分钟，原因目前未知；</p>
<p><img src="https://hanjingyuan.github.io/post-images/1570851376650.png" alt=""><br>
<img src="https://hanjingyuan.github.io/post-images/1570851541447.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0922-0929周总结]]></title>
        <id>https://hanjingyuan.github.io/post/0922-0929周总结</id>
        <link href="https://hanjingyuan.github.io/post/0922-0929周总结">
        </link>
        <updated>2019-09-21T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0922-0929周">0922-0929周</h1>
<h2 id="0923">0923</h2>
<ol>
<li>快速网格化代码</li>
</ol>
<pre><code class="language-js">javascript: (function() {
	var elements = document.body.getElementsByTagName('*');
	var items = [];
	for (var i = 0; i &lt; elements.length; i++) {
		if (elements[i].innerHTML.indexOf('html * { outline: 1px solid red }') != -1) {
			items.push(elements[i]);
		}
	}
	if (items.length &gt; 0) {
		for (var i = 0; i &lt; items.length; i++) {
			items[i].innerHTML = '';
		}
	} else {
		document.body.innerHTML +=
			'&lt;style&gt;html * { outline: 1px solid red }&lt;/style&gt;';
	}
})();

</code></pre>
<h2 id="0924">0924</h2>
<ol>
<li>当遇到gulp合并js文件突然变慢的时候，此时可以尝试重试启动gulp，基本可以解决；</li>
</ol>
<h2 id="0926">0926</h2>
<ol>
<li>geotools,阿里云maven配置</li>
</ol>
<pre><code class="language-xml">&lt;mirror&gt;
		&lt;id&gt;alimaven&lt;/id&gt;
		&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
		&lt;name&gt;aliyun maven&lt;/name&gt;
&lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;
		&lt;mirrorOf&gt;*,!osgeo,!maven2-repository.dev.java.net,!boundless&lt;/mirrorOf&gt; 
&lt;/mirror&gt;
</code></pre>
<h2 id="0929">0929</h2>
<ol>
<li>使用nvm作为node.js的版本管理工具；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0915-0921周总结]]></title>
        <id>https://hanjingyuan.github.io/post/0915-0921周总结</id>
        <link href="https://hanjingyuan.github.io/post/0915-0921周总结">
        </link>
        <updated>2019-09-14T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0915-0921周">0915-0921周</h1>
<h2 id="0917">0917</h2>
<ol>
<li>组织树的简单递归算法实现</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://hanjingyuan.github.io/post-images/1570799418412.png" alt=""></figure>
<pre><code class="language-js">data.forEach(item=&gt;{
  recursiveTraverse(item);
});

const recursiveTraverse = function (node) {
  if (!node || node['children'].length === 0) {
      node['children'] = null;
      return;
  }
  node['children'].forEach(function(item) {
      recursiveTraverse(item);
  });
};
</code></pre>
<h2 id="0918">0918</h2>
<ol>
<li>geoserver中对于restful api使用时遇到401和403问题的解决办法：（1）遇到401时，需要在请求的headers中携带'Authorization': 'Basic YWRtaW46Z2Vvc2VydmVy'来进行解决；（2）遇到403时，说明在web.xml中，跨域信息没有完全打开，此时需要打开跨域请求，即:</li>
</ol>
<pre><code class="language-xml">   &lt;filter&gt;
        &lt;filter-name&gt;cross-origin&lt;/filter-name&gt;
        &lt;filter-class&gt;org.eclipse.jetty.servlets.CrossOriginFilter&lt;/filter-class&gt;
		
       &lt;init-param&gt;
           &lt;param-name&gt;chainPreflight&lt;/param-name&gt;
           &lt;param-value&gt;false&lt;/param-value&gt;
       &lt;/init-param&gt;
       &lt;init-param&gt;
           &lt;param-name&gt;allowedOrigins&lt;/param-name&gt;
           &lt;param-value&gt;*&lt;/param-value&gt;
       &lt;/init-param&gt;
       &lt;init-param&gt;
           &lt;param-name&gt;allowedMethods&lt;/param-name&gt;
           &lt;param-value&gt;GET,POST,PUT,DELETE,HEAD,OPTIONS&lt;/param-value&gt;
       &lt;/init-param&gt;
       &lt;init-param&gt;
           &lt;param-name&gt;allowedHeaders&lt;/param-name&gt;
           &lt;param-value&gt;*&lt;/param-value&gt;
       &lt;/init-param&gt;
    &lt;/filter&gt;

    &lt;filter-mapping&gt;
      &lt;filter-name&gt;Set Character Encoding&lt;/filter-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;
   
    &lt;filter-mapping&gt;
        &lt;filter-name&gt;cross-origin&lt;/filter-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;
   
</code></pre>
<h2 id="0919">0919</h2>
<ol>
<li>天地图的能力请求方式：</li>
</ol>
<pre><code>http://t0.tianditu.gov.cn/vec_c/wmts?tk=f1d0e61021ded0ed120188019ec1c5a3?request=GetCapabilities&amp;service=wmts
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0908-0914周总结]]></title>
        <id>https://hanjingyuan.github.io/post/0908-0914周总结</id>
        <link href="https://hanjingyuan.github.io/post/0908-0914周总结">
        </link>
        <updated>2019-09-07T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0908-0914周">0908-0914周</h1>
<h2 id="0912">0912</h2>
<ol>
<li>对于瓦片规则的获取以及其他geoserver相关图层信息的获取可以使用geoserver自带的rest服务进行查找，例如获取gridset的信息，可以使用：http://localhost:8080/geoserver/gwc/rest/gridsets来实现；</li>
</ol>
<pre><code>1.获取瓦片图层：http://localhost:8080/geoserver/gwc/rest/layers
2.获取girdset：
http://localhost:8080/geoserver/gwc/rest/gridsets
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0901-0907周总结]]></title>
        <id>https://hanjingyuan.github.io/post/0901-0907周总结</id>
        <link href="https://hanjingyuan.github.io/post/0901-0907周总结">
        </link>
        <updated>2019-08-31T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0901-0907周">0901-0907周</h1>
<h2 id="0902">0902</h2>
<ol>
<li>对于postgresql触发器的使用。先编写对应的函数，然后使用触发器函数进行联动；</li>
</ol>
<pre><code>//触发器函数
BEGIN 
  UPDATE public.indexmap_xzq
  SET shape_area=st_area(new.geom)
  WHERE gid=new.gid;
  return NEW;
END;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://hanjingyuan.github.io/post-images/1570799356463.png" alt=""></figure>
<figure data-type="image" tabindex="2"><img src="https://hanjingyuan.github.io/post-images/1570799366762.png" alt=""></figure>
<ol>
<li>对于sld文件的上下限值的设置(注意如果没有上下限，只有单一的限，那么注意去除掉and条件)：</li>
</ol>
<pre><code class="language-xml">&lt;se:Rule&gt;
          &lt;se:Name&gt;极小型&lt;/se:Name&gt;
          &lt;se:Description&gt;
            &lt;se:Title&gt;极小型&lt;/se:Title&gt;
          &lt;/se:Description&gt;
          &lt;ogc:Filter xmlns:ogc=&quot;http://www.opengis.net/ogc&quot;&gt;
              &lt;ogc:PropertyIsLessThanOrEqualTo&gt;
                &lt;ogc:PropertyName&gt;shape_area&lt;/ogc:PropertyName&gt;
                &lt;ogc:Literal&gt;10404351.5462104007601738&lt;/ogc:Literal&gt;
              &lt;/ogc:PropertyIsLessThanOrEqualTo&gt;
          &lt;/ogc:Filter&gt;
          &lt;se:PolygonSymbolizer&gt;
            &lt;se:Fill&gt;
              &lt;se:SvgParameter name=&quot;fill&quot;&gt;#f7fcf5&lt;/se:SvgParameter&gt;
            &lt;/se:Fill&gt;
            &lt;se:Stroke&gt;
              &lt;se:SvgParameter name=&quot;stroke&quot;&gt;#232323&lt;/se:SvgParameter&gt;
              &lt;se:SvgParameter name=&quot;stroke-width&quot;&gt;1&lt;/se:SvgParameter&gt;
              &lt;se:SvgParameter name=&quot;stroke-linejoin&quot;&gt;bevel&lt;/se:SvgParameter&gt;
            &lt;/se:Stroke&gt;
          &lt;/se:PolygonSymbolizer&gt;
        &lt;/se:Rule&gt;
</code></pre>
<h2 id="0903">0903</h2>
<ol>
<li>wfs的结果输出为geojson的方式</li>
</ol>
<pre><code class="language-xml">&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.0.0&quot;
  outputFormat=&quot;application/json&quot;&gt;
</code></pre>
<h2 id="0906">0906</h2>
<ol>
<li>scale与resolution之间的互换：https://www.cnblogs.com/naaoveGIS/p/5620951.html</li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://hanjingyuan.github.io/post-images/1570799379739.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0825-0831周总结]]></title>
        <id>https://hanjingyuan.github.io/post/0825-0831周总结</id>
        <link href="https://hanjingyuan.github.io/post/0825-0831周总结">
        </link>
        <updated>2019-08-24T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0825-0831周">0825-0831周</h1>
<h2 id="0830">0830</h2>
<ol>
<li>对于WFS Transaction的使用，首先要确保geoserver的权限打开，即如果不确定的话，启动匿名模式；</li>
</ol>
<pre><code>http://127.0.0.1:8080/geoserver/web/wicket/page?57
</code></pre>
<ol start="2">
<li>构造WFS/WMS相关语句时，可以参考使用demo request页面，查看相关的示例请求；</li>
</ol>
<pre><code>http://127.0.0.1:8080/geoserver/web/wicket/bookmarkable/org.geoserver.web.demo.DemoRequestsPage?59
</code></pre>
<ol start="3">
<li>根据demo request生成的示例请求进行相关的操作即可；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0818-0824周总结]]></title>
        <id>https://hanjingyuan.github.io/post/0818-0824周总结</id>
        <link href="https://hanjingyuan.github.io/post/0818-0824周总结">
        </link>
        <updated>2019-08-17T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0818-0824周">0818-0824周</h1>
<h2 id="0819">0819</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0811-0817周总结]]></title>
        <id>https://hanjingyuan.github.io/post/0811-0817周总结</id>
        <link href="https://hanjingyuan.github.io/post/0811-0817周总结">
        </link>
        <updated>2019-08-10T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0811-0817周">0811-0817周</h1>
<h2 id="0812">0812</h2>
<ol>
<li>在打印网页时，如果遇到img中的src是从http形式，那么有可能是打印不出来的，这是最好的解决办法就是，首先把img转为base64形式，再进行打印；如果这种办法依然不可以。那么可以考虑将打印页面使用html2canvas插件，将网页转为canvas，然后把canvas元素进行打印。</li>
<li>将图片转为base64格式</li>
</ol>
<pre><code class="language-js">function getBase64(img){
    function getBase64Image(img,width,height) {
   //width、height调用时传入具体像素值，控制大小 ,不传则默认图像大小
        var canvas = document.createElement(&quot;canvas&quot;);
        canvas.width = width ? width : img.width;
        canvas.height = height ? height : img.height;

        var ctx = canvas.getContext(&quot;2d&quot;);
       ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        var dataURL = canvas.toDataURL();
        return dataURL;
    }
    var image = new Image();
    image.crossOrigin = '';
    image.src = img;
    var deferred=$q.defer();
    if(img){
        image.onload =function (){
            deferred.resolve(getBase64Image(image));//将base64传给done上传处理
        };
        return deferred.promise;//问题要让onload完成后再return sessionStorage['imgTest']
    }
}
</code></pre>
<h2 id="0813">0813</h2>
<ol>
<li>ol中指定图层的添加位置，一般用于将图层添加的最上部或最下部；</li>
</ol>
<pre><code class="language-js">map.getLayers().insertAt(0,layer);
</code></pre>
<h2 id="0815">0815</h2>
<ol>
<li>ratio,在ol中，<a href="http://127.0.0.1/ol/apidoc/ol.html">ol</a><a href="http://127.0.0.1/ol/apidoc/ol.source.html">.source</a>.ImageArcGISRest中存在一个ratio参数，在之前的添加agserver图层的过程中，把ratio误理解成透明度，然后填成了1。这就造成了，在手动添加对应图层时，客户端会一直发送请求至服务端，当修改为默认值1.5时，则不再出现这种情况，目前暂不知道原因是什么。ratio指的是请求图片的大小与map viewport的比率，目前尚不清楚为什么比率为1:1时出现的这种不断发送请求的情况。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0804-0810总结]]></title>
        <id>https://hanjingyuan.github.io/post/0804-0810-总结</id>
        <link href="https://hanjingyuan.github.io/post/0804-0810-总结">
        </link>
        <updated>2019-08-04T07:58:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0805">0805</h2>
<ol>
<li>给出一个WKT数据，通过ST_GeomFromText构造geometry数据，然后再使用ST_Intersects求相交数据；</li>
</ol>
<pre><code class="language-sql">SELECT gid, linecolor, proname, protype, proextent,shape_leng, shape_area, geom FROM public.kg_land_bound2 
	where St_Intersects(geom, 
		ST_GeomFromText('POLYGON((57404.91490982982 98730.52662771994,57404.91490982982 99013.10219287108,57405.87564580966 99022.85670897189,57408.720933204255 99032.23636448933,57413.34142921469 99040.88070452206,57419.55957077049 99048.45753193041,57427.136398178845 99054.67567348621,57435.780738211564 99059.29616949665,57445.16039372901 99062.14145689124,57454.91490982982 99063.10219287108,57721.61544323089 99063.10219287108,57731.3699593317 99062.14145689124,57740.74961484915 99059.29616949665,57749.39395488187 99054.67567348621,57756.97078229022 99048.45753193041,57763.18892384602 99040.88070452206,57767.80941985646 99032.23636448933,57770.65470725105 99022.85670897189,57771.61544323089 99013.10219287108,57771.61544323089 98730.52662771994,57770.65470725105 98720.77211161914,57767.80941985646 98711.39245610169,57763.18892384602 98702.74811606896,57756.97078229022 98695.17128866061,57749.39395488187 98688.95314710481,57740.74961484915 98684.33265109437,57731.3699593317 98681.48736369978,57721.61544323089 98680.52662771994,57454.91490982982 98680.52662771994,57445.16039372901 98681.48736369978,57435.780738211564 98684.33265109437,57427.136398178845 98688.95314710481,57419.55957077049 98695.17128866061,57413.34142921469 98702.74811606896,57408.720933204255 98711.39245610169,57405.87564580966 98720.77211161914,57404.91490982982 98730.52662771994))',4547)
   );
</code></pre>
<ol start="2">
<li>asp.net web api中，post请求的方式比较怪异，最好使用dynamic数据类型，在使用动态类型时，需要对数据进行解析操作：</li>
</ol>
<pre><code class="language-c#">[HttpPost]
[Route(&quot;getSpatialQueryInfo&quot;)]
public Result&lt;List&lt;KgLandBound&gt;&gt; getSpatialQueryInfo(dynamic obj)
{
    string wkt = obj.wkt;
    return sas.spatialQuery(wkt);
}
</code></pre>
<ol start="3">
<li>font awesome中使用数字</li>
</ol>
<pre><code class="language-html">&lt;span class=&quot;fa-stack&quot;&gt;
   &lt;span class=&quot;fa fa-circle-thin fa-stack-2x&quot; style=&quot;color: red&quot;&gt;&lt;/span&gt;
   &lt;strong class=&quot;fa-stack-1x&quot; style=&quot;color: red&quot;&gt;2&lt;/strong&gt;
&lt;/span&gt;
</code></pre>
<ol start="4">
<li>angularjs中，执行ng-repeat操作时，遍历时加上index</li>
</ol>
<pre><code class="language-js">ng-repeat=&quot;layer in table.data track by $index&quot;
</code></pre>
<ol start="5">
<li>根据pg查出来的geometry，顺带把面积也进行查询</li>
</ol>
<pre><code class="language-sql">select res.gid,res.ydtype,res.ydcode,res.shape_area,st_area(res.wkt),res.wkt from (
 SELECT gid, ydtype, ydcode,  shape_area,ST_Intersection(geom,ST_MakeEnvelope(49701.02023537382,96951.72932012533,49865.59139784948,97115.77131487598,4547)) as wkt
 FROM public.kg_land_bound2  where ST_Intersects(geom,ST_MakeEnvelope(49701.02023537382,96951.72932012533,49865.59139784948,97115.77131487598,4547))
) as res 

</code></pre>
<h2 id="0806">0806</h2>
<ol>
<li>angularjs中的watch使用方法：</li>
</ol>
<pre><code class="language-js">$scope.$watch(&quot;bufferDistance&quot;,function (newValue,oldValue){
    if(newValue &gt; 0){
        $scope.showDrawLine = true;
    }else{
        $scope.showDrawLine = false;
    }
},true);
</code></pre>
<ol start="2">
<li>postgresql中的简单分页:limit代表每页个数，offset代表偏移量，以下面的代码为例，offset 20代表前面偏移20个数据，从第二十一个数据开始；</li>
</ol>
<pre><code class="language-sql">SELECT gid, ydcode, ydtype, capability, bldhlimit,shape_leng, shape_area, geom
	FROM public.kg_land_bound2 order by gid limit 10 offset 20;
</code></pre>
<ol start="3">
<li>angularjs使用ng-class对于样式的动态修改，使用ng-repeat循环生成子列表。其中通过$index与selected来进行判断，如果两个值相等，那么，selectedBaseMap样式将会生效，从而出现样式切换的效果；</li>
</ol>
<pre><code>&lt;div ng-repeat=&quot;item in baseLayers&quot;
         ng-class=&quot;{selectedBaseMap:$index == selected}&quot;
         style=&quot;background: url('../../App/assets/images/item.img')&quot;
         ng-click=&quot;showBaseMap(item.title,$index)&quot;&gt;
        &lt;span class=&quot;baseMapTitle&quot; ng-class=&quot;{baseMapTitleActive:$index == selected}&quot;&gt;
            item.title
        &lt;/span&gt;
        {{test}}
    &lt;/div&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0728-0803周总结]]></title>
        <id>https://hanjingyuan.github.io/post/0728-0803周总结</id>
        <link href="https://hanjingyuan.github.io/post/0728-0803周总结">
        </link>
        <updated>2019-07-27T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0728-0803周">0728-0803周</h1>
<h2 id="0728">0728</h2>
<ol>
<li>若使用li，使用宽度33%出现了换行情况，则父元素ul标签应该设置font-size:0；</li>
</ol>
<h2 id="0729">0729</h2>
<ol>
<li>在openlayers中，若发生鼠标偏移的情况，则很有可能是CSS问题导致的。在这一次遇到的问题中，由于高度设置问题，map容器出现了滚动条，但是滚动条因为被我进行了强制隐藏操作，所以鼠标出现了偏移的问题。解决的方法是：只要解决掉css导致的高度、滚动条问题，即可以解决鼠标偏移的问题；</li>
<li>监听地图渲染完成后的事件：</li>
</ol>
<pre><code class="language-js">    map.once('postrender', function(event) {
        //do somethings
    });
</code></pre>
<h2 id="0730">0730</h2>
<ol>
<li>当修改了geoserver的配置文件时，会出现预览图层时报空指针的错误，目前已经查到的原因是:默认style样式文件的配置出现问题，此时需要重新配置style即可解决问题；</li>
<li>openlayers中的ol.layer.group只有setLayers方法，可以添加图层到group中去，但是没有从group中移出图层的方法，想要移出图层，只能进行全部移出的操作，使用setLayers方法传进去一个空数组，即使用</li>
</ol>
<pre><code class="language-js">    const group = new ol.layer.group(); 
    group.setLayers(new ol.Collection([]));
</code></pre>
<h2 id="0731">0731</h2>
<ol>
<li>
<p>在后续的开发中，应当采用每开发一个新功能，对应使用一个开发分支，保证功能使用的正确性和流畅性。具体文档参加：https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552;</p>
</li>
<li>
<p>比较重要的就是使用bug分支，即使用git stash可以保存当前的工作状态，然后可以切换到其他分支中去；</p>
</li>
<li>
<p>常用的git分支操作：</p>
</li>
</ol>
<pre><code>    删除本地分支：git branch -d [branchname]
    强制删除本地没有merge的分支：git branch -D [branchname]
    推送本地分支到远程：git push origin [branchname]
    删除远程分支：git push origin --delete [branchname]
    拉取本地不存在的远程分支：git checkout -b 本地分支名 origin/远程分支名
</code></pre>
<ol start="4">
<li>其他常用的git操作：</li>
</ol>
<pre><code>reset hard后的恢复：git reflog（查看历史操作，从而找到版本号）
合并分支：git merge [branchname] 在当前分支上合并目标分支
</code></pre>
<h2 id="0801">0801</h2>
<ol>
<li>postgis实现先用bbox选定指定范围内的数据，然后将选出的数据再进行相关的空间查询，平均耗时不稳定，在150ms左右；</li>
</ol>
<pre><code class="language-sql">select * from
	(
		SELECT gid, linecolor, proname, protype, proextent,shape_leng, shape_area, geom FROM public.kg_land_bound2 
			where geom &amp;&amp; ST_MakeEnvelope(49521.10320887309,96831.87283041234,50109.537719075444,97307.06544746425)
	) as res 
where St_Intersects(res.geom, ST_MakeEnvelope(49701.02023537382,96951.72932012533,49865.59139784948,97115.77131487598,4547));
</code></pre>
<ol start="2">
<li>在不使用st_makeenvelope的情况下，进行直接的查询，消耗的平均时间为140ms；</li>
</ol>
<pre><code class="language-sql">SELECT gid, linecolor, proname, protype, proextent,shape_leng, shape_area, geom FROM public.kg_land_bound2 
			where St_Intersects(geom, ST_MakeEnvelope(49701.02023537382,96951.72932012533,49865.59139784948,97115.77131487598,4547));
</code></pre>
<ol start="3">
<li>
<p>之所以出现上面这种情况，是因为空间数据库中会根据geometry字段自动的生成索引覆盖，由于索引的存在，所以方法2甚至可能会比方法1还要快，毕竟方法2可以直接通过索引的方式找到指定区域，而且比方法1还要少了一个步骤。</p>
</li>
<li>
<p>求相交部分，给定一个大范围，使用intersects，找出与大范围相交的元素，然后再使用intersection，求出相交数据与大范围的重叠部分并且进行返回；</p>
</li>
</ol>
<pre><code class="language-sql">SELECT gid, linecolor, proname, protype, proextent,shape_leng, shape_area,  ST_Intersection(geom,ST_MakeEnvelope(49701.02023537382,96951.72932012533,49865.59139784948,97115.77131487598,4547))
FROM public.kg_land_bound2  where ST_Intersects(geom,ST_MakeEnvelope(49701.02023537382,96951.72932012533,49865.59139784948,97115.77131487598,4547))
</code></pre>
]]></content>
    </entry>
</feed>